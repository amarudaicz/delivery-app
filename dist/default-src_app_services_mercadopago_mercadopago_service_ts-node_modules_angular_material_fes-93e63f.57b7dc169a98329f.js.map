{"version":3,"file":"default-src_app_services_mercadopago_mercadopago_service_ts-node_modules_angular_material_fes-93e63f.57b7dc169a98329f.js","mappings":"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","names":["MercadopagoService","constructor","http","this","BehaviorSubject","initMp","loadMercadoPago","mp","window","MercadoPago","_this","public_key","locale","bricksBuilder","bricks","readyMp","next","getMp","isMpReady","postSubscription","formData","console","log","post","environment","getSubscription","get","putSubscription","status","put","_angular_core__WEBPACK_IMPORTED_MODULE_4__","factory","exports","SDK_MERCADOPAGO_URL","SDK_MERCADOPAGO_URL_REGEX","EXISTING_SCRIPT_MESSAGE_INITIALIZED","LoadPromise","Promise","resolve","reject","warn","script","scripts","document","querySelectorAll","i","length","test","src","findScript","createElement","headOrBody","head","body","Error","appendChild","injectScript","addEventListener","error","policy","trustedHTMLFromString","html","getPolicy","undefined","ttWindow","trustedTypes","createPolicy","createHTML","s","getMatIconNameNotFoundError","iconName","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","pipe","tap","svg","map","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","message","handleError","forkJoin","foundIcon","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","str","div","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","delete","share","configNamespace","svgElement","result","isSafeUrlWithOptions","ɵfac","i0","i1","i2","DOCUMENT","ɵprov","_MatIconBase","mixinColor","_elementRef","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","providedIn","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","inline","_inline","coerceBooleanProperty","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","super","_previousFontSetClass","_currentIconFetch","Subscription","color","defaultColor","nativeElement","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","add","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","take","subscribe","ɵcmp","selectors","ngContentSelectors","MatIconModule","ɵmod","ɵinj","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./src/app/services/mercadopago/mercadopago.service.ts","./node_modules/@mercadopago/sdk-js/dist/index.js","./node_modules/@angular/material/fesm2020/icon.mjs"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { loadMercadoPago } from '@mercadopago/sdk-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/app/environment';\nimport { Subscription } from 'src/app/interfaces/subscription-interface';\n\nexport interface CardData {\n  card_number: string;\n  cardholder: {\n    name: string;\n    identification: {\n      type: string;\n      number: string;\n    };\n  };\n  security_code: string;\n  expiration_month: string;\n  expiration_year: string;\n  device: {\n    meli: {\n      session_id: string;\n    };\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MercadopagoService {\n  private mp: any;\n  private readyMp = new BehaviorSubject<boolean>(false);\n  bricksBuilder:any\n  public_key='APP_USR-27eca799-f893-436f-a977-068ad09c71e4'\n  \n  constructor(private http:HttpClient) {\n    this.initMp();\n  }\n\n  async initMp() {\n    await loadMercadoPago();\n    const mp = new (window as any).MercadoPago(\n      this.public_key, {\n        locale:'es-AR'\n      }\n    );\n    this.mp = mp;\n    this.bricksBuilder = mp.bricks()\n    this.readyMp.next(true);\n\n\n\n  }\n\n  public getMp() {\n    return this.mp;\n  }\n\n  isMpReady() {\n    return this.readyMp;\n  }\n\n\n  postSubscription(formData: CardData) {\n    console.log(formData);\n    return this.http.post<any>(environment.host + 'subscriptions', formData);\n  }\n\n\n  getSubscription(){\n    return this.http.get<Subscription>(environment.host + 'subscriptions')\n  }\n  \n  putSubscription(status:string){\n    return this.http.put<Subscription>(environment.host + 'subscriptions', {status})\n  }\n  \n\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadMercadoPago = void 0;\nconst SDK_MERCADOPAGO_URL = 'https://sdk.mercadopago.com/js/v2';\nconst SDK_MERCADOPAGO_URL_REGEX = /^https:\\/\\/sdk\\.mercadopago\\.com\\/js\\/v2\\/?(\\?.*)?$/;\nconst EXISTING_SCRIPT_MESSAGE_INITIALIZED = 'MercadoPago has already been initialized in your window, please remove the duplicate import';\nconst EXISTING_SCRIPT_MESSAGE_NOT_AVAILABLE = 'MercadoPago.js not available';\nconst EXISTING_SCRIPT_MESSAGE_FAILED_TO_LOAD = 'Failed to load MercadoPago.js';\nconst findScript = () => {\n    var scripts = document.querySelectorAll(`script[src^=\"${SDK_MERCADOPAGO_URL}\"`);\n    for (var i = 0; i < scripts.length; i++) {\n        var script = scripts[i];\n        if (!SDK_MERCADOPAGO_URL_REGEX.test(script.src)) {\n            continue;\n        }\n        return script;\n    }\n    return null;\n};\nconst injectScript = () => {\n    const script = document.createElement('script');\n    script.src = SDK_MERCADOPAGO_URL;\n    const headOrBody = document.head || document.body;\n    if (!headOrBody) {\n        throw new Error('Expected document.body or document.head not to be null. MercadoPago requires a <body> or a <head> element, please add on your project.');\n    }\n    headOrBody.appendChild(script);\n    return script;\n};\nlet LoadPromise = null;\nconst loadMercadoPago = () => {\n    if (LoadPromise !== null) {\n        return LoadPromise;\n    }\n    LoadPromise = new Promise((resolve, reject) => {\n        if (typeof window === 'undefined') {\n            // Resolve to null when imported server side. This makes the module\n            // safe to import in an isomorphic code base.\n            resolve(null);\n            return;\n        }\n        if (window.MercadoPago) {\n            console.warn(EXISTING_SCRIPT_MESSAGE_INITIALIZED);\n            resolve(window.MercadoPago);\n            return;\n        }\n        try {\n            let script = findScript();\n            if (script) {\n                console.warn(EXISTING_SCRIPT_MESSAGE_INITIALIZED);\n            }\n            else if (!script) {\n                script = injectScript();\n            }\n            script.addEventListener('load', () => {\n                if (window.MercadoPago) {\n                    resolve(window.MercadoPago);\n                }\n                else {\n                    reject(new Error(EXISTING_SCRIPT_MESSAGE_NOT_AVAILABLE));\n                }\n            });\n            script.addEventListener('error', () => {\n                reject(new Error(EXISTING_SCRIPT_MESSAGE_FAILED_TO_LOAD));\n            });\n        }\n        catch (error) {\n            reject(error);\n            return;\n        }\n    });\n    return LoadPromise;\n};\nexports.loadMercadoPago = loadMercadoPago;\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"x_google_ignoreList":[1,2]}